<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>genesis-1:31 on My Dev Blog</title><link>https://jobcespedes.dev/tags/genesis-131/</link><description>Recent content in genesis-1:31 on My Dev Blog</description><generator>Hugo -- gohugo.io</generator><copyright>© 2023 Job Céspedes Ortiz</copyright><lastBuildDate>Thu, 27 Feb 2020 14:14:42 -0600</lastBuildDate><atom:link href="https://jobcespedes.dev/tags/genesis-131/index.xml" rel="self" type="application/rss+xml"/><item><title>Multiple Environments in Ansible</title><link>https://jobcespedes.dev/2020/02/multiple-environments-in-ansible/</link><pubDate>Thu, 27 Feb 2020 14:14:42 -0600</pubDate><guid>https://jobcespedes.dev/2020/02/multiple-environments-in-ansible/</guid><description>Many systems are deployed in a multienvironment context, for example: production, stage, and dev. These environments often share variables and artifacts. In Ansible, there are different methods to work in this context. For example, separate directory layout and soft links. However, it can end with a considerable amount of data and duplicate files between environments, exposing variables to all hosts or adding much more complexity to playbooks.
Demo multienv tests a stackable multienvironment directory layout for Ansible, using multienv Ansible role.</description></item></channel></rss>